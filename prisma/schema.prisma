generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model company {
  id               Int                @id @default(autoincrement())
  name             String
  slogan           String?
  description      String?
  cnpj             String             @unique
  logo             String?
  background       String?

  salary           Int?               @default(0)
  companyCeos      companyCeos[]
  companyEmployees companyEmployees[]
  expense          expense[]
  task             task[]
}

model ceo {
  id               Int           @id @default(autoincrement())
  name             String
  email            String        @unique
  cpf              String        @unique
  photo            String?
  companyId        Int?
  password         String
  recoveryPassword String?
  type             String?       @default("ceo")
  companyCeos      companyCeos[]
}

model employee {
  id               Int                @id @default(autoincrement())
  name             String
  email            String             @unique
  cpf              String             @unique
  photo            String?
  salary           Int?
  companyId        Int?
  password         String
  recoveryPassword String?
  type             String?            @default("employee")
  companyEmployees companyEmployees[]
  employeeExpenses employeeExpenses[]
  employeeLoans    employeeLoans[]
  employeeTasks    employeeTasks[]
}

model task {
  id            Int             @id @default(autoincrement())
  title         String
  description   String?
  value         Int
  companyId     Int?
  employeeTasks employeeTasks[]
  company       company?        @relation(fields: [companyId], references: [id])
}

model employeeTasks {
  id         Int       @id @default(autoincrement())
  employeeId Int?
  employee   employee? @relation(fields: [employeeId], references: [id])
  taskId     Int
  tasks      task      @relation(fields: [taskId], references: [id])
  statusTaskId Int     @default(1)
  statusTask    statusTask      @relation(fields: [statusTaskId], references: [id])
}

model statusTask {
  id     Int             @id @default(autoincrement())
  status String          @unique
  tasks  employeeTasks[]
}

model expense {
  id              Int           @id @default(autoincrement())
  title           String
  description     String?
  value           Int
  type            String
  companyId       Int?
  company         company?        @relation(fields: [companyId], references: [id])
  employeeExpensese employeeExpenses[]
}

model employeeExpenses{
  id         Int       @id @default(autoincrement())
  employeeId Int?
  employee   employee? @relation(fields: [employeeId], references: [id])
  expenseId  Int
  expenses    expense   @relation(fields: [expenseId], references: [id])
  statusExpenseId Int     @default(1)
  statusExpense    statusExpense      @relation(fields: [statusExpenseId], references: [id])
}

model statusExpense {
  id       Int       @id @default(autoincrement())
  status   String    @unique
  expenses employeeExpenses[]
}

model loan {
  id               Int      @id @default(autoincrement())
  description      String
  dueDate          Int
  interestRate     Int
  value            Int
  employeeId       Int
  employee         employee @relation(fields: [employeeId], references: [id])
  accepted         Boolean  @default(false)
}
